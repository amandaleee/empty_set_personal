# Use these defaults if your job truly requires a database. Will slow down your
# CircleCI build.
defaults_with_db: &defaults_with_db
  working_directory: ~/empty_set

  docker:
    - image: circleci/python:3.7
      environment:
        DB_HOST: 127.0.0.1
        DB_NAME: empty_set
        DB_PASSWORD: password
        DB_USER: root
        ENVIRONMENT: dev

    - image: circleci/mysql:5.6-ram # See https://github.com/CircleCI-Public/circleci-dockerfiles/blob/master/mysql/images/5.6.42/ram/Dockerfile
      environment:
        MYSQL_ALLOW_EMPTY_PASSWORD: true
        MYSQL_HOST: 127.0.0.1
        MYSQL_ROOT_HOST: "%"
        MYSQL_ROOT_PASSWORD: password

# Use these builds if your job does NOT require a database. Will speed up your
# build. Yay!
defaults_without_db: &defaults_without_db
  working_directory: ~/empty_set

  docker:
    - image: circleci/python:3.7
      environment:
        ENVIRONMENT: dev

# These are some reusable test steps that can be referenced individually in jobs.
default_test_steps:
  - run: &wait_for_db
      name: Wait for db
      command: dockerize -wait tcp://localhost:3306 -timeout 1m 

  - restore_cache: &restore_pipenv_install_cache
      key: deps-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

  - run: &install_dev_and_prod_dependencies_with_pipenv
      name: Install dev dependencies with pipenv
      command: pipenv install --dev

  - save_cache: &save_pipenv_install_cache
      key: deps-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      paths:
        - ~/.local
        - ~/.cache

# Define the jobs.
version: 2
jobs:
  build_and_test:
    <<: *defaults_with_db

    steps:
      - checkout
      - run:           *wait_for_db
      - restore_cache: *restore_pipenv_install_cache
      - run:           *install_dev_and_prod_dependencies_with_pipenv
      - save_cache:    *save_pipenv_install_cache
      - run:
          name: Run Django tests
          command: pipenv run py.test
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
          destination: test-reports
      - run:
          name: Upload code coverage reports
          command: pipenv run codecov --file test-reports/coverage.xml
        
  lint:
    <<: *defaults_without_db

    steps:
      - checkout
      - restore_cache: *restore_pipenv_install_cache
      - run:           *install_dev_and_prod_dependencies_with_pipenv
      - save_cache:    *save_pipenv_install_cache
      - run:
          name: Run Pylint
          command: pipenv run pylint --load-plugins pylint_django ./empty_set

  check_dependencies_for_known_security_vulnerabilities:
    <<: *defaults_without_db

    steps:
      - checkout
      - restore_cache: *restore_pipenv_install_cache
      - run:           *install_dev_and_prod_dependencies_with_pipenv
      - save_cache:    *save_pipenv_install_cache
      - run:
          name: Run safety
          command: pipenv run safety check --full-report

  security_static_analysis:
    <<: *defaults_without_db

    steps:
      - checkout
      - restore_cache: *restore_pipenv_install_cache
      - run:           *install_dev_and_prod_dependencies_with_pipenv
      - save_cache:    *save_pipenv_install_cache
      - run:
          name: Run Bandit
          command: pipenv run bandit -r ./empty_set/

# Run the jobs in a workflow.
workflows:
  version: 2
  build-deploy:
    jobs:
      - build_and_test
      - check_dependencies_for_known_security_vulnerabilities
      - lint
      - security_static_analysis

# Notify the builds service after a successful build.
notify:
  webhooks:
    - url: https://builds.app-us1.com/circle/notify
    - url: https://builds.staging.app-us1.com/circle/notify
